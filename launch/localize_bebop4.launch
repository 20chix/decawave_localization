<?xml version="1.0"?>
<launch>

    <arg name="car_frame_id" default="car/base_link"/>
    <arg name="pose_cov_topic" default="/pose_cov"/>
    <!-- <arg name="map_frame_id" value="map"/> -->

    <rosparam param="tag_names">
        ["tag_left_back", "tag_left_front", "tag_right_front", "tag_right_center"]
    </rosparam>

    <rosparam command="load" file="$(find decawave_localization)/config/real_car.yaml" />

    <rosparam param="offsets">
        ["-0.169", "-0.106", "0.0", "-0.134"]
    </rosparam>


    <!-- Reading from tag sensors -->

    <node name="reader0" type="tag.py" pkg="decawave_localization"
        output="screen">
        <param name="port" value="/dev/ttyACM0"/>
        <param name="baud" value="115200"/>
        <param name="frequency" value="100"/>
    </node>

    <node name="reader1" type="tag.py" pkg="decawave_localization"
        output="screen">
        <param name="port" value="/dev/ttyACM1"/>
        <param name="baud" value="115200"/>
        <param name="frequency" value="100"/>
    </node>

    <node name="reader2" type="tag.py" pkg="decawave_localization"
        output="screen">
        <param name="port" value="/dev/ttyACM2"/>
        <param name="baud" value="115200"/>
        <param name="frequency" value="100"/>
    </node>

    <node name="reader3" type="tag.py" pkg="decawave_localization"
        output="screen">
        <param name="port" value="/dev/ttyACM3"/>
        <param name="baud" value="115200"/>
        <param name="frequency" value="100"/>
    </node>

    <node name="filter_left_front" type="kalman.py" pkg="decawave_localization" output="screen">
        <param name="tag_range_topic" value="tag_left_front/range" />
    </node>

    <node name="filter_left_back" type="kalman.py" pkg="decawave_localization" output="screen">
        <param name="tag_range_topic" value="tag_left_back/range" />
    </node>

    <node name="filter_right_center" type="kalman.py" pkg="decawave_localization" output="screen">
        <param name="tag_range_topic" value="tag_right_center/range" />
    </node>

    <node name="filter_left_center" type="kalman.py" pkg="decawave_localization" output="screen">
        <param name="tag_range_topic" value="tag_right_front/range" />
    </node>

    <!-- Static transforms from the car frame to the tags -->

    <node name="tag_transforms" type="tag_transforms.py" pkg="decawave_localization" output="screen">
        <param name="frame_id" value="$(arg car_frame_id)" />
    </node>

<!--     <node pkg="tf" type="static_transform_publisher" name="car_to_tag_left_front"
        args="0.51 0.31 0 0 0 0 $(arg car_frame_id) tag_left_front 100" />

    <node pkg="tf" type="static_transform_publisher" name="car_to_tag_right_center"
        args="-0.03 -0.31 0 0 0 0 $(arg car_frame_id) tag_right_center 100" />

    <node pkg="tf" type="static_transform_publisher" name="car_to_tag_left_back"
        args="-0.54 0.29 0 0 0 0 $(arg car_frame_id) tag_left_back 100" />

    <node pkg="tf" type="static_transform_publisher" name="car_to_tag_left_center"
        args="0.51 -0.29 0 0 0 0 $(arg car_frame_id) tag_left_center 100" />
 -->
    <!-- Dummy transform from map to car -->

    <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_car" -->
    <!--     args="1 0 0 0 0 0 $(arg map_frame_id) $(arg car_frame_id) 100" /> -->

    <!-- Running the trilateration node -->
    <node pkg="decawave_localization" type="localize.py"
        name="decawave_localization" output="screen">
        <param name="frame_id" value="$(arg car_frame_id)"/>
        <param name="frequency" value="30"/>
        <param name="cov_x" value="0.6"/>
        <param name="cov_y" value="0.6"/>
        <param name="cov_sensor" value="0.3"/>
        <remap from="pose_cov" to="$(arg pose_cov_topic)"/>
        <rosparam>
            tag_range_topics:
                - tag_left_front/range_filtered
                - tag_left_back/range_filtered
                - tag_right_center/range_filtered
                - tag_right_front/range_filtered
            transition_matrix: [1, 0, 0, 1]
            observation_matrix: [1, 0, 0, 1]
            initial_state: [0, 0]
            initial_cov: [0.1, 0, 0, 0.1]
        </rosparam>
    </node>
</launch>
